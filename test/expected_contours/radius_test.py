'''
Universidad de La Laguna
Máster en Ingeniería Informática
Trabajo de Final de Máster
Pyimagos development
'''

import pytest

import numpy as np

from src.expected_contours.radius import (
  ExpectedContourRadius
)

class TestRadiusExpectedContour:

  @pytest.fixture(scope='class')
  def radius_contour(self):
    yield np.array(
      [[[200, 351]],
      [[199, 352]],
      [[197, 352]],
      [[196, 353]],
      [[194, 353]],
      [[193, 354]],
      [[191, 354]],
      [[190, 355]],
      [[187, 355]],
      [[186, 356]],
      [[182, 356]],
      [[181, 357]],
      [[177, 357]],
      [[176, 358]],
      [[155, 358]],
      [[154, 359]],
      [[151, 359]],
      [[150, 358]],
      [[149, 359]],
      [[138, 359]],
      [[137, 358]],
      [[132, 358]],
      [[131, 359]],
      [[129, 359]],
      [[127, 361]],
      [[127, 364]],
      [[126, 365]],
      [[126, 366]],
      [[129, 369]],
      [[128, 370]],
      [[126, 370]],
      [[125, 371]],
      [[125, 374]],
      [[124, 375]],
      [[124, 377]],
      [[122, 379]],
      [[122, 380]],
      [[123, 381]],
      [[123, 383]],
      [[124, 384]],
      [[124, 400]],
      [[123, 401]],
      [[123, 407]],
      [[122, 408]],
      [[122, 411]],
      [[121, 412]],
      [[121, 415]],
      [[120, 416]],
      [[120, 418]],
      [[119, 419]],
      [[119, 422]],
      [[117, 424]],
      [[117, 428]],
      [[116, 429]],
      [[116, 430]],
      [[114, 432]],
      [[114, 434]],
      [[113, 435]],
      [[113, 436]],
      [[112, 437]],
      [[112, 439]],
      [[111, 440]],
      [[111, 444]],
      [[130, 444]],
      [[131, 443]],
      [[151, 443]],
      [[152, 442]],
      [[153, 442]],
      [[155, 440]],
      [[155, 439]],
      [[156, 438]],
      [[156, 437]],
      [[158, 435]],
      [[158, 434]],
      [[159, 433]],
      [[159, 432]],
      [[161, 430]],
      [[161, 429]],
      [[162, 428]],
      [[162, 427]],
      [[163, 426]],
      [[163, 425]],
      [[165, 423]],
      [[165, 422]],
      [[166, 421]],
      [[166, 420]],
      [[168, 418]],
      [[168, 417]],
      [[170, 415]],
      [[170, 414]],
      [[173, 411]],
      [[173, 410]],
      [[176, 407]],
      [[176, 406]],
      [[188, 394]],
      [[188, 393]],
      [[192, 389]],
      [[192, 388]],
      [[194, 386]],
      [[194, 384]],
      [[195, 383]],
      [[195, 379]],
      [[196, 378]],
      [[197, 378]],
      [[198, 377]],
      [[199, 377]],
      [[203, 373]],
      [[203, 372]],
      [[205, 370]],
      [[205, 369]],
      [[206, 368]],
      [[206, 367]],
      [[208, 365]],
      [[208, 364]],
      [[209, 363]],
      [[209, 361]],
      [[210, 360]],
      [[210, 358]],
      [[211, 357]],
      [[211, 356]],
      [[210, 355]],
      [[210, 353]],
      [[209, 352]],
      [[208, 352]],
      [[207, 351]]],
      dtype=np.int32
    )

  def test_empty_contour(self):
    phalanx = ExpectedContourRadius()
    phalanx.prepare([], 66, 151)
    shape_score = phalanx.shape_restrictions()
    assert shape_score == float('inf')

  def test_ideal_shape_accepted(self, radius_contour):
    phalanx = ExpectedContourRadius()
    phalanx.prepare(radius_contour, 250, 500)
    shape_score = phalanx.shape_restrictions()
    assert shape_score != float('inf')

  def test_shape_under_250_area(self):
    under_250_proximal_phalanx = np.array(
      [[[14,  0]],
      [[13,  1]],
      [[ 0,  1]],
      [[ 0,  5]],
      [[ 1,  5]],
      [[ 2,  6]],
      [[ 1,  7]],
      [[ 0,  7]],
      [[ 0, 19]],
      [[10, 19]],
      [[10, 18]],
      [[11, 17]],
      [[11, 16]],
      [[12, 15]],
      [[12, 14]],
      [[13, 13]],
      [[13, 12]],
      [[14, 11]],
      [[14, 10]],
      [[15,  9]],
      [[15,  8]],
      [[14,  7]],
      [[15,  6]],
      [[15,  0]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourRadius()
    phalanx.prepare(under_250_proximal_phalanx, 40, 100)
    shape_score = phalanx.shape_restrictions()
    assert shape_score == float('inf')

  def test_bad_aspect_ratio(self):
    bad_aspect_ratio = np.array(
      [[[14,  0]],
      [[13,  1]],
      [[ 0,  1]],
      [[ 0,  3]],
      [[ 1,  4]],
      [[ 1,  5]],
      [[ 0,  6]],
      [[ 0, 15]],
      [[11, 15]],
      [[12, 14]],
      [[12, 13]],
      [[13, 12]],
      [[13, 11]],
      [[14, 10]],
      [[14,  9]],
      [[15,  8]],
      [[14,  7]],
      [[15,  6]],
      [[15,  0]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourRadius()
    phalanx.prepare(bad_aspect_ratio, 66, 151)
    shape_score = phalanx.shape_restrictions()
    assert shape_score == float('inf')

  def test_solidity_too_high(self):
    high_solidity = np.array(
      [[[ 0,  0]],
      [[ 0, 17]],
      [[ 1, 16]],
      [[ 2, 16]],
      [[ 3, 15]],
      [[ 4, 15]],
      [[ 6, 13]],
      [[ 7, 13]],
      [[ 8, 12]],
      [[ 9, 12]],
      [[11, 10]],
      [[12, 10]],
      [[13,  9]],
      [[14,  9]],
      [[15,  8]],
      [[14,  7]],
      [[15,  6]],
      [[14,  6]],
      [[13,  5]],
      [[12,  5]],
      [[11,  4]],
      [[ 9,  4]],
      [[ 8,  3]],
      [[ 7,  3]],
      [[ 6,  2]],
      [[ 4,  2]],
      [[ 3,  1]],
      [[ 2,  1]],
      [[ 1,  0]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourRadius()
    phalanx.prepare(high_solidity, 60, 140)
    shape_value = phalanx.shape_restrictions()
    assert shape_value == float('inf')

  def test_too_many_convexity_defects(self):
    over_convex_defects = np.array(
      [[[200, 351]],
      [[199, 352]],
      [[197, 352]],
      [[196, 353]],
      [[194, 353]],
      [[193, 354]],
      [[191, 354]],
      [[190, 355]],
      [[187, 355]],
      [[186, 356]],
      [[182, 356]],
      [[181, 357]],
      [[177, 357]],
      [[176, 358]],
      [[155, 358]],
      [[154, 359]],
      [[151, 359]],
      [[150, 358]],
      [[149, 359]],
      [[138, 359]],
      [[137, 358]],
      [[132, 358]],
      [[131, 359]],
      [[129, 359]],
      [[127, 361]],
      [[127, 364]],
      [[126, 365]],
      [[126, 366]],
      [[129, 369]],
      [[128, 370]],
      [[126, 370]],
      [[125, 371]],
      [[125, 374]],
      [[124, 375]],
      [[124, 377]],
      [[122, 379]],
      [[122, 380]],
      [[123, 381]],
      [[123, 383]],
      [[124, 384]],
      [[124, 400]],
      [[123, 401]],
      [[123, 407]],
      [[122, 408]],
      [[122, 411]],
      [[121, 412]],
      [[121, 415]],
      [[120, 416]],
      [[120, 418]],
      [[119, 419]],
      [[119, 422]],
      [[117, 424]],
      [[117, 428]],
      [[116, 429]],
      [[116, 430]],
      [[114, 432]],
      [[114, 434]],
      [[113, 435]],
      [[113, 436]],
      [[112, 437]],
      [[112, 439]],
      [[111, 440]],
      [[111, 444]],
      [[126, 444]],
      [[127, 443]],
      [[127, 442]],
      [[129, 440]],
      [[129, 439]],
      [[131, 437]],
      [[131, 436]],
      [[133, 434]],
      [[133, 433]],
      [[134, 432]],
      [[136, 434]],
      [[136, 435]],
      [[141, 440]],
      [[141, 441]],
      [[143, 443]],
      [[151, 443]],
      [[152, 442]],
      [[153, 442]],
      [[155, 440]],
      [[155, 439]],
      [[156, 438]],
      [[156, 437]],
      [[158, 435]],
      [[158, 434]],
      [[159, 433]],
      [[159, 432]],
      [[161, 430]],
      [[161, 429]],
      [[162, 428]],
      [[162, 427]],
      [[163, 426]],
      [[163, 425]],
      [[165, 423]],
      [[165, 422]],
      [[166, 421]],
      [[166, 420]],
      [[168, 418]],
      [[168, 417]],
      [[170, 415]],
      [[170, 414]],
      [[173, 411]],
      [[173, 410]],
      [[176, 407]],
      [[176, 406]],
      [[188, 394]],
      [[188, 393]],
      [[192, 389]],
      [[192, 388]],
      [[194, 386]],
      [[194, 384]],
      [[195, 383]],
      [[195, 379]],
      [[196, 378]],
      [[197, 378]],
      [[198, 377]],
      [[199, 377]],
      [[203, 373]],
      [[203, 372]],
      [[205, 370]],
      [[205, 369]],
      [[206, 368]],
      [[206, 367]],
      [[208, 365]],
      [[208, 364]],
      [[209, 363]],
      [[209, 361]],
      [[210, 360]],
      [[210, 358]],
      [[211, 357]],
      [[211, 356]],
      [[210, 355]],
      [[210, 353]],
      [[209, 352]],
      [[208, 352]],
      [[207, 351]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourRadius()
    phalanx.prepare(over_convex_defects, 250, 500)
    shape_value = phalanx.shape_restrictions()
    assert shape_value == float('inf')

  def test_too_few_convexity_defects(self):
    under_convex_defects = np.array(
      [[[200, 351]],
      [[199, 352]],
      [[197, 352]],
      [[196, 353]],
      [[194, 353]],
      [[193, 354]],
      [[191, 354]],
      [[190, 355]],
      [[187, 355]],
      [[186, 356]],
      [[182, 356]],
      [[181, 357]],
      [[177, 357]],
      [[176, 358]],
      [[155, 358]],
      [[154, 359]],
      [[151, 359]],
      [[150, 358]],
      [[149, 359]],
      [[138, 359]],
      [[137, 358]],
      [[132, 358]],
      [[131, 359]],
      [[129, 359]],
      [[127, 361]],
      [[127, 364]],
      [[126, 365]],
      [[126, 366]],
      [[129, 369]],
      [[128, 370]],
      [[126, 370]],
      [[125, 371]],
      [[125, 374]],
      [[124, 375]],
      [[124, 377]],
      [[122, 379]],
      [[122, 380]],
      [[123, 381]],
      [[123, 383]],
      [[124, 384]],
      [[124, 400]],
      [[123, 401]],
      [[123, 407]],
      [[122, 408]],
      [[122, 411]],
      [[121, 412]],
      [[121, 415]],
      [[120, 416]],
      [[120, 418]],
      [[119, 419]],
      [[119, 422]],
      [[117, 424]],
      [[117, 428]],
      [[116, 429]],
      [[116, 430]],
      [[114, 432]],
      [[114, 434]],
      [[113, 435]],
      [[113, 436]],
      [[112, 437]],
      [[112, 439]],
      [[111, 440]],
      [[111, 444]],
      [[130, 444]],
      [[131, 443]],
      [[151, 443]],
      [[152, 442]],
      [[153, 442]],
      [[155, 440]],
      [[155, 439]],
      [[156, 438]],
      [[156, 437]],
      [[158, 435]],
      [[158, 434]],
      [[159, 433]],
      [[159, 432]],
      [[161, 430]],
      [[161, 429]],
      [[162, 428]],
      [[162, 427]],
      [[163, 426]],
      [[163, 425]],
      [[165, 423]],
      [[165, 422]],
      [[166, 421]],
      [[166, 420]],
      [[168, 418]],
      [[168, 417]],
      [[170, 415]],
      [[170, 414]],
      [[173, 411]],
      [[173, 410]],
      [[176, 407]],
      [[176, 406]],
      [[188, 394]],
      [[188, 393]],
      [[192, 389]],
      [[192, 388]],
      [[194, 386]],
      [[194, 384]],
      [[197, 381]],
      [[197, 380]],
      [[199, 378]],
      [[199, 377]],
      [[203, 373]],
      [[203, 372]],
      [[205, 370]],
      [[205, 369]],
      [[206, 368]],
      [[206, 367]],
      [[208, 365]],
      [[208, 364]],
      [[209, 363]],
      [[209, 361]],
      [[210, 360]],
      [[210, 358]],
      [[211, 357]],
      [[211, 356]],
      [[210, 355]],
      [[210, 353]],
      [[209, 352]],
      [[208, 352]],
      [[207, 351]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourRadius()
    phalanx.prepare(under_convex_defects, 250, 500)
    shape_value = phalanx.shape_restrictions()
    assert shape_value == float('inf')
