'''
Universidad de La Laguna
Máster en Ingeniería Informática
Trabajo de Final de Máster
Pyimagos development
'''

import pytest

import numpy as np

from src.expected_contours.ulna import (
  ExpectedContourUlna
)

class TestUlnaExpectedContour:

  @pytest.fixture(scope='class')
  def ulna_contour(self):
    yield np.array(
      [[[ 87, 342]],
      [[ 86, 343]],
      [[ 85, 343]],
      [[ 80, 348]],
      [[ 80, 349]],
      [[ 79, 350]],
      [[ 78, 350]],
      [[ 77, 351]],
      [[ 77, 356]],
      [[ 73, 360]],
      [[ 73, 361]],
      [[ 72, 362]],
      [[ 72, 364]],
      [[ 71, 365]],
      [[ 71, 366]],
      [[ 70, 367]],
      [[ 70, 369]],
      [[ 69, 370]],
      [[ 69, 371]],
      [[ 68, 372]],
      [[ 68, 374]],
      [[ 67, 375]],
      [[ 67, 376]],
      [[ 66, 377]],
      [[ 66, 378]],
      [[ 65, 379]],
      [[ 65, 380]],
      [[ 64, 381]],
      [[ 64, 382]],
      [[ 63, 383]],
      [[ 63, 384]],
      [[ 62, 385]],
      [[ 62, 386]],
      [[ 61, 387]],
      [[ 61, 388]],
      [[ 59, 390]],
      [[ 59, 391]],
      [[ 58, 392]],
      [[ 58, 393]],
      [[ 57, 394]],
      [[ 57, 395]],
      [[ 55, 397]],
      [[ 55, 398]],
      [[ 53, 400]],
      [[ 53, 401]],
      [[ 52, 402]],
      [[ 52, 403]],
      [[ 50, 405]],
      [[ 50, 406]],
      [[ 48, 408]],
      [[ 48, 409]],
      [[ 46, 411]],
      [[ 46, 412]],
      [[ 45, 413]],
      [[ 45, 414]],
      [[ 43, 416]],
      [[ 43, 417]],
      [[ 41, 419]],
      [[ 41, 420]],
      [[ 40, 421]],
      [[ 40, 422]],
      [[ 37, 425]],
      [[ 37, 426]],
      [[ 36, 427]],
      [[ 36, 428]],
      [[ 35, 429]],
      [[ 35, 430]],
      [[ 33, 432]],
      [[ 33, 433]],
      [[ 31, 435]],
      [[ 31, 436]],
      [[ 30, 437]],
      [[ 30, 438]],
      [[ 29, 439]],
      [[ 29, 440]],
      [[ 27, 442]],
      [[ 27, 444]],
      [[ 59, 444]],
      [[ 59, 443]],
      [[ 62, 440]],
      [[ 62, 439]],
      [[ 64, 437]],
      [[ 64, 435]],
      [[ 65, 434]],
      [[ 65, 433]],
      [[ 66, 432]],
      [[ 66, 431]],
      [[ 68, 429]],
      [[ 68, 428]],
      [[ 69, 427]],
      [[ 69, 426]],
      [[ 70, 425]],
      [[ 70, 424]],
      [[ 71, 423]],
      [[ 71, 421]],
      [[ 72, 420]],
      [[ 72, 419]],
      [[ 73, 418]],
      [[ 73, 415]],
      [[ 75, 413]],
      [[ 75, 411]],
      [[ 76, 410]],
      [[ 76, 409]],
      [[ 78, 407]],
      [[ 78, 406]],
      [[ 79, 405]],
      [[ 79, 404]],
      [[ 81, 402]],
      [[ 81, 401]],
      [[ 83, 399]],
      [[ 83, 398]],
      [[ 95, 386]],
      [[ 96, 386]],
      [[ 99, 383]],
      [[100, 383]],
      [[102, 381]],
      [[103, 381]],
      [[104, 380]],
      [[105, 380]],
      [[107, 378]],
      [[108, 378]],
      [[109, 377]],
      [[110, 377]],
      [[112, 375]],
      [[112, 371]],
      [[114, 369]],
      [[114, 368]],
      [[115, 367]],
      [[116, 367]],
      [[117, 366]],
      [[117, 361]],
      [[116, 360]],
      [[116, 359]],
      [[115, 358]],
      [[113, 358]],
      [[112, 357]],
      [[109, 357]],
      [[108, 356]],
      [[105, 356]],
      [[104, 355]],
      [[100, 355]],
      [[ 99, 354]],
      [[ 98, 354]],
      [[ 96, 352]],
      [[ 96, 351]],
      [[ 95, 350]],
      [[ 95, 343]],
      [[ 94, 342]]],
      dtype=np.int32
    )

  def test_empty_contour(self):
    phalanx = ExpectedContourUlna()
    phalanx.prepare([], 66, 151)
    shape_score = phalanx.shape_restrictions()
    assert shape_score == float('inf')

  def test_ideal_shape_accepted(self, ulna_contour):
    phalanx = ExpectedContourUlna()
    phalanx.prepare(ulna_contour, 250, 500)
    shape_score = phalanx.shape_restrictions()
    assert shape_score != float('inf')

  def test_shape_under_250_area(self):
    under_250_proximal_phalanx = np.array(
      [[[ 0,  0]],
      [[ 0,  3]],
      [[ 2,  5]],
      [[ 1,  6]],
      [[ 0,  6]],
      [[ 0, 15]],
      [[ 7, 15]],
      [[ 7, 13]],
      [[ 6, 12]],
      [[ 6,  9]],
      [[ 7,  8]],
      [[ 7,  1]],
      [[ 5,  1]],
      [[ 4,  2]],
      [[ 2,  2]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourUlna()
    phalanx.prepare(under_250_proximal_phalanx, 40, 100)
    shape_score = phalanx.shape_restrictions()
    assert shape_score == float('inf')

  def test_bad_aspect_ratio(self):
    bad_aspect_ratio = np.array(
      [[[ 59, 385]],
      [[ 58, 386]],
      [[ 57, 386]],
      [[ 52, 391]],
      [[ 52, 392]],
      [[ 51, 393]],
      [[ 50, 393]],
      [[ 49, 394]],
      [[ 49, 399]],
      [[ 45, 403]],
      [[ 45, 404]],
      [[ 44, 405]],
      [[ 44, 407]],
      [[ 43, 408]],
      [[ 43, 409]],
      [[ 42, 410]],
      [[ 42, 412]],
      [[ 41, 413]],
      [[ 41, 414]],
      [[ 40, 415]],
      [[ 40, 417]],
      [[ 39, 418]],
      [[ 39, 419]],
      [[ 38, 420]],
      [[ 38, 423]],
      [[ 37, 424]],
      [[ 37, 426]],
      [[ 36, 427]],
      [[ 36, 428]],
      [[ 35, 429]],
      [[ 35, 430]],
      [[ 33, 432]],
      [[ 33, 433]],
      [[ 31, 435]],
      [[ 31, 436]],
      [[ 30, 437]],
      [[ 30, 438]],
      [[ 29, 439]],
      [[ 29, 440]],
      [[ 27, 442]],
      [[ 27, 444]],
      [[ 59, 444]],
      [[ 59, 443]],
      [[ 62, 440]],
      [[ 62, 439]],
      [[ 64, 437]],
      [[ 64, 435]],
      [[ 65, 434]],
      [[ 65, 433]],
      [[ 71, 427]],
      [[ 72, 427]],
      [[ 78, 421]],
      [[ 80, 421]],
      [[ 81, 420]],
      [[ 82, 420]],
      [[ 84, 418]],
      [[ 84, 414]],
      [[ 86, 412]],
      [[ 86, 411]],
      [[ 87, 410]],
      [[ 88, 410]],
      [[ 89, 409]],
      [[ 89, 404]],
      [[ 88, 403]],
      [[ 88, 402]],
      [[ 87, 401]],
      [[ 85, 401]],
      [[ 84, 400]],
      [[ 81, 400]],
      [[ 80, 399]],
      [[ 77, 399]],
      [[ 76, 398]],
      [[ 72, 398]],
      [[ 71, 397]],
      [[ 70, 397]],
      [[ 68, 395]],
      [[ 68, 394]],
      [[ 67, 393]],
      [[ 67, 386]],
      [[ 66, 385]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourUlna()
    phalanx.prepare(bad_aspect_ratio, 66, 151)
    shape_score = phalanx.shape_restrictions()
    assert shape_score == float('inf')

  def test_solidity_too_high(self):
    high_solidity = np.array(
      [[[ 87, 342]],
      [[ 86, 343]],
      [[ 85, 343]],
      [[ 80, 348]],
      [[ 80, 349]],
      [[ 79, 350]],
      [[ 78, 350]],
      [[ 77, 351]],
      [[ 77, 356]],
      [[ 73, 360]],
      [[ 73, 361]],
      [[ 72, 362]],
      [[ 72, 364]],
      [[ 71, 365]],
      [[ 71, 366]],
      [[ 70, 367]],
      [[ 70, 369]],
      [[ 69, 370]],
      [[ 69, 371]],
      [[ 68, 372]],
      [[ 68, 374]],
      [[ 67, 375]],
      [[ 67, 376]],
      [[ 66, 377]],
      [[ 66, 378]],
      [[ 65, 379]],
      [[ 65, 380]],
      [[ 64, 381]],
      [[ 64, 382]],
      [[ 63, 383]],
      [[ 63, 384]],
      [[ 62, 385]],
      [[ 62, 386]],
      [[ 61, 387]],
      [[ 61, 388]],
      [[ 59, 390]],
      [[ 59, 391]],
      [[ 58, 392]],
      [[ 58, 393]],
      [[ 57, 394]],
      [[ 57, 395]],
      [[ 55, 397]],
      [[ 55, 398]],
      [[ 53, 400]],
      [[ 53, 401]],
      [[ 52, 402]],
      [[ 52, 403]],
      [[ 50, 405]],
      [[ 50, 406]],
      [[ 48, 408]],
      [[ 48, 409]],
      [[ 46, 411]],
      [[ 46, 412]],
      [[ 45, 413]],
      [[ 45, 414]],
      [[ 43, 416]],
      [[ 43, 417]],
      [[ 41, 419]],
      [[ 41, 420]],
      [[ 40, 421]],
      [[ 40, 422]],
      [[ 37, 425]],
      [[ 37, 426]],
      [[ 36, 427]],
      [[ 36, 428]],
      [[ 35, 429]],
      [[ 35, 430]],
      [[ 33, 432]],
      [[ 33, 433]],
      [[ 31, 435]],
      [[ 31, 436]],
      [[ 30, 437]],
      [[ 30, 438]],
      [[ 29, 439]],
      [[ 29, 440]],
      [[ 27, 442]],
      [[ 27, 444]],
      [[ 31, 444]],
      [[ 34, 441]],
      [[ 35, 441]],
      [[ 42, 434]],
      [[ 43, 434]],
      [[ 50, 427]],
      [[ 51, 427]],
      [[ 58, 420]],
      [[ 59, 420]],
      [[ 66, 413]],
      [[ 67, 413]],
      [[ 74, 406]],
      [[ 75, 406]],
      [[ 82, 399]],
      [[ 83, 399]],
      [[ 90, 392]],
      [[ 91, 392]],
      [[ 98, 385]],
      [[ 99, 385]],
      [[104, 380]],
      [[105, 380]],
      [[107, 378]],
      [[108, 378]],
      [[109, 377]],
      [[110, 377]],
      [[112, 375]],
      [[112, 371]],
      [[114, 369]],
      [[114, 368]],
      [[115, 367]],
      [[116, 367]],
      [[117, 366]],
      [[117, 361]],
      [[116, 360]],
      [[116, 359]],
      [[115, 358]],
      [[113, 358]],
      [[112, 357]],
      [[109, 357]],
      [[108, 356]],
      [[105, 356]],
      [[104, 355]],
      [[100, 355]],
      [[ 99, 354]],
      [[ 98, 354]],
      [[ 96, 352]],
      [[ 96, 351]],
      [[ 95, 350]],
      [[ 95, 343]],
      [[ 94, 342]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourUlna()
    phalanx.prepare(high_solidity, 150, 450)
    shape_value = phalanx.shape_restrictions()
    assert shape_value == float('inf')

  def test_too_many_convexity_defects(self):
    over_convex_defects = np.array(
      [[[ 87, 342]],
      [[ 86, 343]],
      [[ 85, 343]],
      [[ 80, 348]],
      [[ 80, 349]],
      [[ 79, 350]],
      [[ 78, 350]],
      [[ 77, 351]],
      [[ 77, 356]],
      [[ 73, 360]],
      [[ 73, 361]],
      [[ 72, 362]],
      [[ 72, 364]],
      [[ 71, 365]],
      [[ 71, 366]],
      [[ 70, 367]],
      [[ 70, 369]],
      [[ 69, 370]],
      [[ 69, 371]],
      [[ 68, 372]],
      [[ 68, 374]],
      [[ 67, 375]],
      [[ 67, 376]],
      [[ 66, 377]],
      [[ 66, 378]],
      [[ 65, 379]],
      [[ 65, 380]],
      [[ 64, 381]],
      [[ 64, 382]],
      [[ 63, 383]],
      [[ 63, 384]],
      [[ 62, 385]],
      [[ 62, 386]],
      [[ 61, 387]],
      [[ 61, 388]],
      [[ 59, 390]],
      [[ 59, 391]],
      [[ 58, 392]],
      [[ 58, 393]],
      [[ 57, 394]],
      [[ 57, 395]],
      [[ 55, 397]],
      [[ 55, 398]],
      [[ 53, 400]],
      [[ 53, 401]],
      [[ 52, 402]],
      [[ 52, 403]],
      [[ 50, 405]],
      [[ 50, 406]],
      [[ 48, 408]],
      [[ 48, 409]],
      [[ 46, 411]],
      [[ 46, 412]],
      [[ 45, 413]],
      [[ 45, 414]],
      [[ 43, 416]],
      [[ 43, 417]],
      [[ 41, 419]],
      [[ 41, 420]],
      [[ 40, 421]],
      [[ 40, 422]],
      [[ 37, 425]],
      [[ 37, 426]],
      [[ 36, 427]],
      [[ 36, 428]],
      [[ 35, 429]],
      [[ 35, 430]],
      [[ 33, 432]],
      [[ 33, 433]],
      [[ 31, 435]],
      [[ 31, 436]],
      [[ 30, 437]],
      [[ 30, 438]],
      [[ 29, 439]],
      [[ 29, 440]],
      [[ 27, 442]],
      [[ 27, 444]],
      [[ 32, 444]],
      [[ 32, 443]],
      [[ 33, 442]],
      [[ 34, 442]],
      [[ 37, 439]],
      [[ 38, 439]],
      [[ 41, 436]],
      [[ 42, 436]],
      [[ 45, 433]],
      [[ 46, 433]],
      [[ 48, 431]],
      [[ 51, 434]],
      [[ 51, 435]],
      [[ 56, 440]],
      [[ 56, 441]],
      [[ 59, 444]],
      [[ 59, 443]],
      [[ 62, 440]],
      [[ 62, 439]],
      [[ 64, 437]],
      [[ 64, 435]],
      [[ 65, 434]],
      [[ 65, 433]],
      [[ 66, 432]],
      [[ 66, 431]],
      [[ 68, 429]],
      [[ 68, 428]],
      [[ 69, 427]],
      [[ 69, 426]],
      [[ 70, 425]],
      [[ 70, 424]],
      [[ 71, 423]],
      [[ 71, 421]],
      [[ 72, 420]],
      [[ 72, 419]],
      [[ 73, 418]],
      [[ 73, 415]],
      [[ 75, 413]],
      [[ 75, 411]],
      [[ 76, 410]],
      [[ 76, 409]],
      [[ 78, 407]],
      [[ 78, 406]],
      [[ 79, 405]],
      [[ 79, 404]],
      [[ 81, 402]],
      [[ 81, 401]],
      [[ 83, 399]],
      [[ 83, 398]],
      [[ 95, 386]],
      [[ 96, 386]],
      [[ 99, 383]],
      [[100, 383]],
      [[102, 381]],
      [[103, 381]],
      [[104, 380]],
      [[105, 380]],
      [[107, 378]],
      [[108, 378]],
      [[109, 377]],
      [[110, 377]],
      [[112, 375]],
      [[112, 371]],
      [[114, 369]],
      [[114, 368]],
      [[115, 367]],
      [[116, 367]],
      [[117, 366]],
      [[117, 361]],
      [[116, 360]],
      [[116, 359]],
      [[115, 358]],
      [[113, 358]],
      [[112, 357]],
      [[109, 357]],
      [[108, 356]],
      [[105, 356]],
      [[104, 355]],
      [[100, 355]],
      [[ 99, 354]],
      [[ 98, 354]],
      [[ 96, 352]],
      [[ 96, 351]],
      [[ 95, 350]],
      [[ 95, 343]],
      [[ 94, 342]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourUlna()
    phalanx.prepare(over_convex_defects, 250, 500)
    shape_value = phalanx.shape_restrictions()
    assert shape_value == float('inf')

  def test_too_few_convexity_defects(self):
    under_convex_defects = np.array(
      [[[ 87, 342]],
      [[ 86, 343]],
      [[ 85, 343]],
      [[ 80, 348]],
      [[ 80, 349]],
      [[ 79, 350]],
      [[ 78, 350]],
      [[ 77, 351]],
      [[ 77, 356]],
      [[ 73, 360]],
      [[ 73, 361]],
      [[ 72, 362]],
      [[ 72, 364]],
      [[ 71, 365]],
      [[ 71, 366]],
      [[ 70, 367]],
      [[ 70, 369]],
      [[ 69, 370]],
      [[ 69, 371]],
      [[ 68, 372]],
      [[ 68, 374]],
      [[ 67, 375]],
      [[ 67, 376]],
      [[ 66, 377]],
      [[ 66, 378]],
      [[ 65, 379]],
      [[ 65, 380]],
      [[ 64, 381]],
      [[ 64, 382]],
      [[ 63, 383]],
      [[ 63, 384]],
      [[ 62, 385]],
      [[ 62, 386]],
      [[ 61, 387]],
      [[ 61, 388]],
      [[ 59, 390]],
      [[ 59, 391]],
      [[ 58, 392]],
      [[ 58, 393]],
      [[ 57, 394]],
      [[ 57, 395]],
      [[ 55, 397]],
      [[ 55, 398]],
      [[ 53, 400]],
      [[ 53, 401]],
      [[ 52, 402]],
      [[ 52, 403]],
      [[ 50, 405]],
      [[ 50, 406]],
      [[ 48, 408]],
      [[ 48, 409]],
      [[ 46, 411]],
      [[ 46, 412]],
      [[ 45, 413]],
      [[ 45, 414]],
      [[ 43, 416]],
      [[ 43, 417]],
      [[ 41, 419]],
      [[ 41, 420]],
      [[ 40, 421]],
      [[ 40, 422]],
      [[ 37, 425]],
      [[ 37, 426]],
      [[ 36, 427]],
      [[ 36, 428]],
      [[ 35, 429]],
      [[ 35, 430]],
      [[ 33, 432]],
      [[ 33, 433]],
      [[ 31, 435]],
      [[ 31, 436]],
      [[ 30, 437]],
      [[ 30, 438]],
      [[ 29, 439]],
      [[ 29, 440]],
      [[ 27, 442]],
      [[ 27, 444]],
      [[ 59, 444]],
      [[ 59, 443]],
      [[ 62, 440]],
      [[ 62, 439]],
      [[ 64, 437]],
      [[ 64, 435]],
      [[ 65, 434]],
      [[ 65, 433]],
      [[ 66, 432]],
      [[ 66, 431]],
      [[ 68, 429]],
      [[ 68, 428]],
      [[ 69, 427]],
      [[ 69, 426]],
      [[ 70, 425]],
      [[ 70, 424]],
      [[ 71, 423]],
      [[ 71, 421]],
      [[ 72, 420]],
      [[ 72, 419]],
      [[ 73, 418]],
      [[ 73, 415]],
      [[ 75, 413]],
      [[ 75, 411]],
      [[ 76, 410]],
      [[ 76, 409]],
      [[ 78, 407]],
      [[ 78, 406]],
      [[ 79, 405]],
      [[ 79, 404]],
      [[ 81, 402]],
      [[ 81, 401]],
      [[ 83, 399]],
      [[ 83, 398]],
      [[ 95, 386]],
      [[ 96, 386]],
      [[ 99, 383]],
      [[100, 383]],
      [[102, 381]],
      [[103, 381]],
      [[104, 380]],
      [[105, 380]],
      [[107, 378]],
      [[108, 378]],
      [[109, 377]],
      [[110, 377]],
      [[112, 375]],
      [[112, 371]],
      [[114, 369]],
      [[114, 368]],
      [[115, 367]],
      [[116, 367]],
      [[117, 366]],
      [[117, 361]],
      [[116, 360]],
      [[116, 359]],
      [[115, 358]],
      [[114, 358]],
      [[112, 356]],
      [[111, 356]],
      [[109, 354]],
      [[108, 354]],
      [[106, 352]],
      [[105, 352]],
      [[102, 349]],
      [[101, 349]],
      [[ 99, 347]],
      [[ 98, 347]],
      [[ 96, 345]],
      [[ 95, 345]],
      [[ 93, 343]],
      [[ 92, 343]],
      [[ 91, 342]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourUlna()
    phalanx.prepare(under_convex_defects, 250, 500)
    shape_value = phalanx.shape_restrictions()
    assert shape_value == float('inf')
