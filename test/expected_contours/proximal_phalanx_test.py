'''
Universidad de La Laguna
Máster en Ingeniería Informática
Trabajo de Final de Máster
Pyimagos development
'''

import pytest

import numpy as np

from src.expected_contours.proximal_phalanx import (
  ExpectedContourProximalPhalanx
)

class TestProximalPhalanxExpectedContour:

  @pytest.fixture(scope='class')
  def proximal_phalanx_contour(self):
    yield np.array([[[ 26,  77]],
       [[ 24,  79]],
       [[ 22,  79]],
       [[ 21,  80]],
       [[ 19,  80]],
       [[ 18,  81]],
       [[ 10,  81]],
       [[  9,  82]],
       [[  8,  82]],
       [[  8,  90]],
       [[ 11,  93]],
       [[ 11,  94]],
       [[ 13,  96]],
       [[ 13,  97]],
       [[ 15,  99]],
       [[ 15, 100]],
       [[ 16, 101]],
       [[ 16, 103]],
       [[ 17, 104]],
       [[ 17, 106]],
       [[ 18, 107]],
       [[ 18, 109]],
       [[ 19, 110]],
       [[ 19, 111]],
       [[ 20, 112]],
       [[ 20, 113]],
       [[ 21, 114]],
       [[ 21, 117]],
       [[ 22, 118]],
       [[ 22, 121]],
       [[ 23, 122]],
       [[ 23, 129]],
       [[ 22, 130]],
       [[ 22, 137]],
       [[ 24, 139]],
       [[ 32, 139]],
       [[ 33, 138]],
       [[ 34, 138]],
       [[ 35, 137]],
       [[ 37, 137]],
       [[ 38, 136]],
       [[ 40, 136]],
       [[ 41, 135]],
       [[ 44, 135]],
       [[ 45, 134]],
       [[ 56, 134]],
       [[ 57, 133]],
       [[ 58, 133]],
       [[ 58, 131]],
       [[ 59, 130]],
       [[ 59, 128]],
       [[ 58, 127]],
       [[ 58, 126]],
       [[ 57, 125]],
       [[ 56, 125]],
       [[ 43, 112]],
       [[ 43, 111]],
       [[ 41, 109]],
       [[ 41, 108]],
       [[ 40, 107]],
       [[ 40, 106]],
       [[ 38, 104]],
       [[ 38, 103]],
       [[ 37, 102]],
       [[ 37, 101]],
       [[ 36, 100]],
       [[ 36,  99]],
       [[ 35,  98]],
       [[ 35,  96]],
       [[ 33,  94]],
       [[ 33,  89]],
       [[ 32,  88]],
       [[ 32,  86]],
       [[ 33,  85]],
       [[ 33,  84]],
       [[ 32,  83]],
       [[ 32,  81]],
       [[ 31,  80]],
       [[ 30,  80]],
       [[ 27,  77]]],
       dtype=np.int32
    ) 

  def test_empty_contour(self):
    phalanx = ExpectedContourProximalPhalanx(1)
    phalanx.prepare([], 66, 151)
    shape_score = phalanx.shape_restrictions()
    assert shape_score == float('inf')

  def test_ideal_shape_accepted(self, proximal_phalanx_contour):
    phalanx = ExpectedContourProximalPhalanx(1)
    phalanx.prepare(proximal_phalanx_contour, 66, 151)
    shape_score = phalanx.shape_restrictions()
    assert shape_score != float('inf')

  def test_shape_under_80_area(self):
    under_80_proximal_phalanx = np.array(
      [[[ 1,  1]],
      [[ 1,  9]],
      [[ 0, 10]],
      [[ 0, 11]],
      [[ 1, 11]],
      [[ 2, 10]],
      [[ 3, 10]],
      [[ 4, 11]],
      [[ 5, 11]],
      [[ 6, 10]],
      [[ 6,  7]],
      [[ 5,  6]],
      [[ 5,  3]],
      [[ 6,  2]],
      [[ 6,  1]],
      [[ 5,  2]],
      [[ 2,  2]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourProximalPhalanx(1)
    phalanx.prepare(under_80_proximal_phalanx, 40, 100)
    shape_score = phalanx.shape_restrictions()
    assert shape_score == float('inf')

  def test_bad_aspect_ratio(self):
    bad_aspect_ratio = np.array(
      [[[ 50,  92]],
      [[ 48,  94]],
      [[ 46,  94]],
      [[ 45,  95]],
      [[ 43,  95]],
      [[ 42,  96]],
      [[ 34,  96]],
      [[ 33,  97]],
      [[ 32,  97]],
      [[ 32, 105]],
      [[ 35, 108]],
      [[ 35, 109]],
      [[ 37, 111]],
      [[ 37, 112]],
      [[ 38, 113]],
      [[ 38, 115]],
      [[ 39, 114]],
      [[ 40, 115]],
      [[ 40, 116]],
      [[ 41, 117]],
      [[ 41, 118]],
      [[ 42, 119]],
      [[ 42, 121]],
      [[ 41, 122]],
      [[ 41, 125]],
      [[ 40, 126]],
      [[ 40, 130]],
      [[ 39, 131]],
      [[ 39, 138]],
      [[ 41, 140]],
      [[ 49, 140]],
      [[ 50, 139]],
      [[ 51, 139]],
      [[ 52, 138]],
      [[ 54, 138]],
      [[ 55, 137]],
      [[ 57, 137]],
      [[ 58, 136]],
      [[ 61, 136]],
      [[ 62, 135]],
      [[ 73, 135]],
      [[ 74, 134]],
      [[ 75, 134]],
      [[ 75, 132]],
      [[ 76, 131]],
      [[ 76, 129]],
      [[ 75, 128]],
      [[ 75, 127]],
      [[ 74, 126]],
      [[ 73, 126]],
      [[ 58, 111]],
      [[ 58, 110]],
      [[ 57, 109]],
      [[ 57, 104]],
      [[ 56, 103]],
      [[ 56, 101]],
      [[ 57, 100]],
      [[ 57,  99]],
      [[ 56,  98]],
      [[ 56,  96]],
      [[ 55,  95]],
      [[ 54,  95]],
      [[ 51,  92]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourProximalPhalanx(1)
    phalanx.prepare(bad_aspect_ratio, 66, 151)
    shape_score = phalanx.shape_restrictions()
    assert shape_score == float('inf')

  def test_second_occurence_aspect_ratio_tolerance_fault(
    self,
    proximal_phalanx_contour
  ):
    distal_1 = ExpectedContourProximalPhalanx(1)
    distal_1.prepare(proximal_phalanx_contour, 66, 151)
    distal_2 = ExpectedContourProximalPhalanx(2, distal_1)
    larger_aspect_contour = np.array(
        [[[ 33,  59]],
        [[ 31,  61]],
        [[ 29,  61]],
        [[ 28,  62]],
        [[ 26,  62]],
        [[ 25,  63]],
        [[ 17,  63]],
        [[ 16,  64]],
        [[ 15,  64]],
        [[ 15,  72]],
        [[ 18,  75]],
        [[ 18,  76]],
        [[ 21,  79]],
        [[ 21,  80]],
        [[ 22,  81]],
        [[ 22,  82]],
        [[ 23,  83]],
        [[ 23,  84]],
        [[ 24,  85]],
        [[ 24,  86]],
        [[ 25,  87]],
        [[ 25,  88]],
        [[ 26,  89]],
        [[ 26,  90]],
        [[ 27,  91]],
        [[ 27,  92]],
        [[ 28,  93]],
        [[ 28,  94]],
        [[ 30,  96]],
        [[ 30,  97]],
        [[ 32,  99]],
        [[ 32, 100]],
        [[ 33, 101]],
        [[ 33, 103]],
        [[ 34, 104]],
        [[ 34, 106]],
        [[ 35, 107]],
        [[ 35, 109]],
        [[ 36, 110]],
        [[ 36, 111]],
        [[ 37, 112]],
        [[ 37, 113]],
        [[ 38, 114]],
        [[ 38, 117]],
        [[ 39, 118]],
        [[ 39, 121]],
        [[ 40, 122]],
        [[ 40, 129]],
        [[ 39, 130]],
        [[ 39, 137]],
        [[ 41, 139]],
        [[ 49, 139]],
        [[ 50, 138]],
        [[ 51, 138]],
        [[ 52, 137]],
        [[ 54, 137]],
        [[ 55, 136]],
        [[ 57, 136]],
        [[ 58, 135]],
        [[ 61, 135]],
        [[ 62, 134]],
        [[ 73, 134]],
        [[ 74, 133]],
        [[ 75, 133]],
        [[ 75, 131]],
        [[ 76, 130]],
        [[ 76, 128]],
        [[ 75, 127]],
        [[ 75, 126]],
        [[ 74, 125]],
        [[ 73, 125]],
        [[ 60, 112]],
        [[ 60, 111]],
        [[ 58, 109]],
        [[ 58, 108]],
        [[ 57, 107]],
        [[ 57, 106]],
        [[ 55, 104]],
        [[ 55, 103]],
        [[ 54, 102]],
        [[ 54, 101]],
        [[ 53, 100]],
        [[ 53,  99]],
        [[ 52,  98]],
        [[ 52,  96]],
        [[ 50,  94]],
        [[ 50,  91]],
        [[ 49,  90]],
        [[ 49,  89]],
        [[ 47,  87]],
        [[ 47,  86]],
        [[ 46,  85]],
        [[ 46,  84]],
        [[ 44,  82]],
        [[ 44,  81]],
        [[ 42,  79]],
        [[ 42,  78]],
        [[ 40,  76]],
        [[ 40,  71]],
        [[ 39,  70]],
        [[ 39,  68]],
        [[ 40,  67]],
        [[ 40,  66]],
        [[ 39,  65]],
        [[ 39,  63]],
        [[ 38,  62]],
        [[ 37,  62]],
        [[ 34,  59]]],
      dtype=np.int32
    )
    distal_2.prepare(larger_aspect_contour, 76, 140)
    score = distal_2.shape_restrictions()
    assert score == float('inf')

  def test_solidity_too_high(self):
    high_solidity = np.array(
      [[[ 36,  80]],
      [[ 35,  81]],
      [[ 27,  81]],
      [[ 26,  82]],
      [[ 25,  82]],
      [[ 25,  90]],
      [[ 28,  93]],
      [[ 28,  94]],
      [[ 30,  96]],
      [[ 30,  97]],
      [[ 32,  99]],
      [[ 32, 100]],
      [[ 33, 101]],
      [[ 33, 103]],
      [[ 34, 104]],
      [[ 34, 106]],
      [[ 35, 107]],
      [[ 35, 109]],
      [[ 36, 110]],
      [[ 36, 111]],
      [[ 37, 112]],
      [[ 37, 113]],
      [[ 38, 114]],
      [[ 38, 117]],
      [[ 39, 118]],
      [[ 39, 121]],
      [[ 40, 122]],
      [[ 40, 129]],
      [[ 39, 130]],
      [[ 39, 137]],
      [[ 41, 139]],
      [[ 49, 139]],
      [[ 50, 138]],
      [[ 51, 138]],
      [[ 52, 137]],
      [[ 54, 137]],
      [[ 55, 136]],
      [[ 57, 136]],
      [[ 58, 135]],
      [[ 61, 135]],
      [[ 62, 134]],
      [[ 73, 134]],
      [[ 74, 133]],
      [[ 75, 133]],
      [[ 75, 131]],
      [[ 76, 130]],
      [[ 76, 128]],
      [[ 75, 127]],
      [[ 75, 126]],
      [[ 74, 125]],
      [[ 73, 125]],
      [[ 60, 112]],
      [[ 60, 111]],
      [[ 57, 108]],
      [[ 56, 108]],
      [[ 54, 106]],
      [[ 53, 106]],
      [[ 52, 105]],
      [[ 51, 105]],
      [[ 49, 103]],
      [[ 48, 103]],
      [[ 46, 101]],
      [[ 45, 101]],
      [[ 44, 100]],
      [[ 44,  99]],
      [[ 43,  98]],
      [[ 43,  96]],
      [[ 42,  95]],
      [[ 42,  93]],
      [[ 41,  92]],
      [[ 41,  90]],
      [[ 40,  89]],
      [[ 40,  88]],
      [[ 39,  87]],
      [[ 39,  85]],
      [[ 38,  84]],
      [[ 38,  82]],
      [[ 37,  81]],
      [[ 37,  80]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourProximalPhalanx(1)
    phalanx.prepare(high_solidity, 60, 140)
    shape_value = phalanx.shape_restrictions()
    assert shape_value == float('inf')

  def test_too_many_convexity_defects(self):
    over_convex_defects = np.array(
      [[[ 43,  77]],
      [[ 41,  79]],
      [[ 39,  79]],
      [[ 38,  80]],
      [[ 36,  80]],
      [[ 35,  81]],
      [[ 27,  81]],
      [[ 26,  82]],
      [[ 25,  82]],
      [[ 25,  90]],
      [[ 27,  92]],
      [[ 28,  92]],
      [[ 30,  94]],
      [[ 32,  94]],
      [[ 33,  95]],
      [[ 34,  95]],
      [[ 35,  96]],
      [[ 37,  96]],
      [[ 39,  98]],
      [[ 38,  99]],
      [[ 38, 101]],
      [[ 37, 102]],
      [[ 37, 103]],
      [[ 36, 104]],
      [[ 36, 108]],
      [[ 35, 109]],
      [[ 35, 110]],
      [[ 34, 111]],
      [[ 34, 112]],
      [[ 32, 114]],
      [[ 32, 115]],
      [[ 30, 117]],
      [[ 30, 118]],
      [[ 31, 119]],
      [[ 31, 120]],
      [[ 34, 120]],
      [[ 35, 119]],
      [[ 39, 119]],
      [[ 40, 120]],
      [[ 49, 120]],
      [[ 50, 121]],
      [[ 52, 121]],
      [[ 53, 122]],
      [[ 51, 124]],
      [[ 50, 124]],
      [[ 44, 130]],
      [[ 43, 130]],
      [[ 39, 134]],
      [[ 39, 137]],
      [[ 41, 139]],
      [[ 49, 139]],
      [[ 50, 138]],
      [[ 51, 138]],
      [[ 52, 137]],
      [[ 54, 137]],
      [[ 55, 136]],
      [[ 57, 136]],
      [[ 58, 135]],
      [[ 61, 135]],
      [[ 62, 134]],
      [[ 73, 134]],
      [[ 74, 133]],
      [[ 75, 133]],
      [[ 75, 131]],
      [[ 76, 130]],
      [[ 76, 128]],
      [[ 75, 127]],
      [[ 75, 126]],
      [[ 74, 125]],
      [[ 73, 125]],
      [[ 60, 112]],
      [[ 60, 111]],
      [[ 58, 109]],
      [[ 58, 108]],
      [[ 57, 107]],
      [[ 57, 106]],
      [[ 55, 104]],
      [[ 55, 103]],
      [[ 54, 102]],
      [[ 54, 101]],
      [[ 53, 100]],
      [[ 53,  99]],
      [[ 52,  98]],
      [[ 52,  96]],
      [[ 50,  94]],
      [[ 50,  89]],
      [[ 49,  88]],
      [[ 49,  86]],
      [[ 50,  85]],
      [[ 50,  84]],
      [[ 49,  83]],
      [[ 49,  81]],
      [[ 48,  80]],
      [[ 47,  80]],
      [[ 44,  77]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourProximalPhalanx(1)
    phalanx.prepare(over_convex_defects, 60, 140)
    shape_value = phalanx.shape_restrictions()
    assert shape_value == float('inf')

  def test_too_few_convexity_defects(self):
    under_convex_defects = np.array(
      [[[ 43,  77]],
      [[ 41,  79]],
      [[ 39,  79]],
      [[ 38,  80]],
      [[ 36,  80]],
      [[ 35,  81]],
      [[ 27,  81]],
      [[ 26,  82]],
      [[ 25,  82]],
      [[ 25,  90]],
      [[ 27,  92]],
      [[ 27,  93]],
      [[ 28,  94]],
      [[ 28,  97]],
      [[ 29,  98]],
      [[ 29, 100]],
      [[ 30, 101]],
      [[ 30, 104]],
      [[ 31, 105]],
      [[ 31, 107]],
      [[ 32, 108]],
      [[ 32, 111]],
      [[ 33, 112]],
      [[ 33, 114]],
      [[ 34, 115]],
      [[ 34, 118]],
      [[ 35, 119]],
      [[ 35, 121]],
      [[ 36, 122]],
      [[ 36, 125]],
      [[ 37, 126]],
      [[ 37, 128]],
      [[ 38, 129]],
      [[ 38, 132]],
      [[ 39, 133]],
      [[ 39, 137]],
      [[ 41, 139]],
      [[ 49, 139]],
      [[ 50, 138]],
      [[ 51, 138]],
      [[ 52, 137]],
      [[ 54, 137]],
      [[ 55, 136]],
      [[ 57, 136]],
      [[ 58, 135]],
      [[ 61, 135]],
      [[ 62, 134]],
      [[ 73, 134]],
      [[ 74, 133]],
      [[ 75, 133]],
      [[ 75, 131]],
      [[ 76, 130]],
      [[ 76, 128]],
      [[ 75, 127]],
      [[ 75, 126]],
      [[ 74, 125]],
      [[ 73, 125]],
      [[ 60, 112]],
      [[ 60, 111]],
      [[ 58, 109]],
      [[ 58, 108]],
      [[ 57, 107]],
      [[ 57, 106]],
      [[ 55, 104]],
      [[ 55, 103]],
      [[ 54, 102]],
      [[ 54, 101]],
      [[ 53, 100]],
      [[ 53,  99]],
      [[ 52,  98]],
      [[ 52,  96]],
      [[ 50,  94]],
      [[ 50,  89]],
      [[ 49,  88]],
      [[ 49,  86]],
      [[ 50,  85]],
      [[ 50,  84]],
      [[ 49,  83]],
      [[ 49,  81]],
      [[ 48,  80]],
      [[ 47,  80]],
      [[ 44,  77]]],
      dtype=np.int32
    )
    phalanx = ExpectedContourProximalPhalanx(1)
    phalanx.prepare(under_convex_defects, 60, 140)
    shape_value = phalanx.shape_restrictions()
    assert shape_value == float('inf')

  def test_self_interception_contour_is_discarded(self):
    self_intercepting_contour = np.array(
      [[25, 66],
      [24, 67],
      [21, 67],
      [32, 68],
      [32, 82],
      [22, 84],
      [22, 87],
      [21, 88],
      [21, 89],
      [20, 91],
      [19, 92],
      [19, 96],
      [20, 97],
      [31, 97],
      [32, 82],
      [32, 68],
      [31, 67],
      [28, 67],
      [27, 66]],
      dtype=np.int32
    )

    phalanx = ExpectedContourProximalPhalanx(1)
    phalanx.prepare(self_intercepting_contour, 32, 97)
    score = phalanx.shape_restrictions()
    assert score == float('inf')
